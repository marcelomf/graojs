  {%- macro render_field(schema, fieldName, field, isFilter, isSubDocArrayField) %}
      {%- set inputtypes = ['text', 'password' ] %}
      {%- if inputtypes.indexOf(field.type) !== -1 %}
          {{ input(field.type, schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.type == 'date' %}
          {{ input_date(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.type == 'checkbox' %}
          {{ input_checkbox(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.type == 'radio' %}
          {{ input_radio(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.type == 'textarea' %}
          {{ textarea(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.type == 'select' %}
          {{ select(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.type == 'union' %}
          {{ union(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.isSubDoc == true && !field.isArray %}
          {{ subDoc(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- elseif field.isSubDoc == true && field.isArray %}
          {{ subDocArray(schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- else %}
          {{ input('text', schema, fieldName, field, isFilter, isSubDocArrayField) }}
      {%- endif %}
  {%- endmacro %}

  {% macro get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) %}{% if isFilter %}dataList.filter.{{fieldName}}{% elseif isSubDocArrayField %}new{{ field.fullPathCc|replace("^"+schema, "", "g")|replace(fieldName|capitalize+"$", "", "g")+"."+fieldName }}{% else %}{{ field.fullPath }}{% endif %}{% endmacro %}

  {% macro refSaveObject(schema, fields) %}{%- for fieldName, field in fields %}{% if field.isSubDoc && field.isArray %}share.refSaveObject( { schemaObject : "new{{ field.fullPathCc|replace("^"+schema, "", "g") }}", object : new{{ field.fullPathCc|replace("^"+schema, "", "g") }} != null ? new{{ field.fullPathCc|replace("^"+schema, "", "g") }} : {} }); {% elseif field.hasSubDoc && field.fields && !field.ref %}{{refSaveObject(schema, field.fields)}}{% endif %}{% endfor %}{% endmacro %}

  {%- macro input(type, schema, fieldName, field, isFilter, isSubDocArrayField) %}
  .form-group(ng-class="{'has-error': errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}}")
    input.form-control(type='{{ type }}', ng-model="{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}", placeholder=__('{{ field.label }}'){% if field.attr %},{% for attr in field.attr %} {{ loop.key }}='{{ attr }}'{% endfor %}{% endif %}) 
    span.help-block.ng-hide(ng-show="errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}")='{{ '{{' }} errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }} }}'
  {%- endmacro %} 

  {%- macro input_date(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  .form-group(ng-class="{'has-error': errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}}")
    input.form-control(type='input', ng-model="{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}", placeholder=__('{{ field.label }}'){% if field.attr %},{% for attr in field.attr %} {{ loop.key }}='{{ attr }}'{% endfor %}{% endif %}
      show-weeks="false", datepicker-popup=__("yyyy-MM-dd"), day-format="dd", month-format="MM", year-format="yyyy", year-range="20", 
      day-header-format="EEE", day-title-format="MM/yyyy", moth-tittle-format="yyyy", datepicker-options="{ 'starting-day' : '1' }",
      current-text=__('Today'), toggle-weeks-text=__('Weeks'), clear-text=__('Clear'), close-text=__('Close'))
    span.help-block.ng-hide(ng-show="errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}")='{{ '{{' }} errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }} }}'
  {%- endmacro %} 

  {%- macro input_checkbox(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  .form-group(ng-class="{'has-error': errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}}")
    label.checkbox-inline
      input(type='checkbox', ng-model="{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}" value='{{ field.value }}'{% if field.attr %},{% for attr in field.attr %} {{ loop.key }}='{{ attr }}'{% endfor %}{% endif %}) 
      =__('{{ field.label }}')
    span.help-block.ng-hide(ng-show="errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}")='{{ '{{' }} errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }} }}'
  {%- endmacro %}

  {%- macro input_radio(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  .form-group(ng-class="{'has-error': errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}}")
  {%- for option in field.options %}
    label.radio-inline
      input(type='radio', ng-model="{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}" value='{{ loop.key }}'{% if field.attr %},{% for attr in field.attr %} {{ loop.key }}='{{ attr }}'{% endfor %}{% endif %}) 
      =__('{{ option }}'){%- endfor %}
    span.help-block.ng-hide(ng-show="errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}")='{{ '{{' }} errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }} }}'
  {%- endmacro %}

  {%- macro textarea(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  .form-group(ng-class="{'has-error': errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}}")
    textarea.form-control(ng-model="{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}", placeholder=__('{{ field.label }}'){% if field.attr %},{% for attr in field.attr %} {{ loop.key }}='{{ attr }}'{% endfor %}{% endif %})
    span.help-block.ng-hide(ng-show="errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}")='{{ '{{' }} errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }} }}'
  {%- endmacro %}

  {%- macro select(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  {%- set isMultiple = false %}
  .form-group(ng-class="{'has-error': errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}}"){%- if field.ref %}{%- if !isFilter && field.ref|lower != schema|lower %}
    .input-group{% endif %}
      select.form-control(ui-select2, ng-model="{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}", data-placeholder=__('{{ field.label }}'){% if field.attr %},{% for attr in field.attr %}{% if loop.key == 'multiple' && attr==true %}{%- set isMultiple = true %}{% endif %} {{ loop.key }}='{{ attr }}'{% endfor %}{% endif %})
        {% if !isMultiple %}option.form-control(value=''){% endif %}
        option.form-control(value='{{ "{{" }}{{ field.ref | lower }}._id }}', ng-repeat='{{ field.ref | lower }} in {{ field.ref | lower }}s') {{ '{{' }} {{ field.ref | lower }}.{% if field.refLabel %}{{ field.refLabel }}{% else %}{{ '_id' }}{% endif %} }}{%- if !isFilter && field.ref|lower != schema|lower %}
      span.input-group-btn
        button.btn.btn-primary(ng-class="{'btn-danger': errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}}", ng-click='{{ field.fullPath|replace("\..*", "", "g") }} = {{ field.fullPath|replace("\..*", "", "g") }} != null ? {{ field.fullPath|replace("\..*", "", "g") }} : {}; share.refSaveObject({ schemaObject : "{{ field.fullPath|replace("\..*", "", "g") }}", object : {{ field.fullPath|replace("\..*", "", "g") }} != null ? {{ field.fullPath|replace("\..*", "", "g") }} : {} }); {{refSaveObject(schema, fields)}} ;{{ field.fullPath|replace("\.([^\.]*)$", "", "g") }} = {{ field.fullPath|replace("\.([^\.]*)$", "", "g") }} != null ? {{ field.fullPath|replace("\.([^\.]*)$", "", "g") }} : {}; share.refClean("{{ field.ref|lower }}"); {% if field.fields %}{%- for subFieldName, subField in field.fields %}{% if subField.isSubDoc && subField.isArray%}share.refClean("new{{subFieldName|capitalize}}"); {% endif %}{% endfor %}{% endif %}share.refAdd({ schemaRef : "{{ field.ref|lower }}", refList : {{ field.ref | lower }}s, {% if !isSubDocArrayField %}schemaObject : "{{ field.fullPath|replace("\..*", "", "g") }}", object : {{ field.fullPath|replace("\..*", "", "g") }}, objectField: {{ field.fullPath|replace("\.([^\.]*)$", "", "g") }}, field: "{{ field.fullPath|replace(".*\.", "", "g") }}", isArray : {{field.isArray}}{% else %}schemaObject : "new{{ field.fullPathCc|replace("^"+schema, "", "g")|replace(fieldName|capitalize+"$", "", "g") }}", object : new{{ field.fullPathCc|replace("^"+schema, "", "g")|replace(fieldName|capitalize+"$", "", "g") }}, objectField: new{{ field.fullPathCc|replace("^"+schema, "", "g")|replace(fieldName|capitalize+"$", "", "g") }}, field: "{{ fieldName }}", isArray : {{field.isArray}}{% endif %} }); share.window("createOrUpdate{{ field.ref | capitalize }}");') + {%- endif %}{%- else %}
    select.form-control(ui-select2, ng-model="{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}", data-placeholder=__('{{ field.label }}'){% if field.attr %},{% for attr in field.attr %}{% if loop.key == 'multiple' && attr==true %}{%- set isMultiple = true %}{% endif %} {{ loop.key }}='{{ attr }}'{% endfor %}{% endif %})
      {% if !isMultiple %}option.form-control(value=''){% endif %}{%- if field.options %}{%- for option in field.options %}
      option.form-control(value='{{ loop.key }}')=__('{{ option }}'){%- endfor %}{%- endif %}{%- endif %}
    span.help-block.ng-hide(ng-show="errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }}")='{{ '{{' }} errors.{{ get_ngmodel(schema, fieldName, field, isFilter, isSubDocArrayField) }} }}'
  {%- endmacro %}

  {%- macro union(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  {%- if field.ref %}
  .form-group
    include /{{ field.bundle | lower }}/view/{{ field.ref | lower }}_fields
    {%- if isFilter == true %}
    +filter_fields_{{ field.ref | lower }}()
    {%- else %}
    +form_fields_{{ field.ref | lower }}()
    {%- endif %}
  {%- endif %}
  {%- endmacro %}

  {%- macro subDoc(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  h4=__("{{fieldName | capitalize}}")
  {%- for subFieldName, subField in field.fields %}
  {{ render_field(schema, subFieldName, subField, isFilter, false) }}
  {%- endfor %}
  {%- endmacro %}

  {%- macro subDocArray(schema, fieldName, field, isFilter, isSubDocArrayField) %}
  h4=__("{{fieldName | capitalize}}")
  {%- for subFieldName, subField in field.fields %}
  {{ render_field(schema, subFieldName, subField, isFilter, true) }}
  {%- endfor %}
  .form-group
    button.btn.btn-primary.btn-lg.btn-block(ng-click='createOrUpdate{{ field.fullPathCc | replace("^"+schema, "", "g") }}(); clear{{ field.fullPathCc | replace("^"+schema, "", "g") }}();')=__('Save')
    .table-responsive(ng-show="{{field.fullPath}} && {{field.fullPath}}.length > 0")
      table.table.table-striped
        thead
          tr {%- for subFieldName, subField in field.fields %}
            th=__('{{ subField.label }}') {%- endfor %}
            th.table-actions=__('Actions')
        tbody
          tr(ng-repeat="item in {{ field.fullPath }} track by $index"){%- for subFieldName, subField in field.fields %}
            td {{ '{{' }} item.{{ subFieldName }} }}{%- endfor %}
            td
              button.btn.btn-danger.btn-xs.icon.icon-trash(type='button', ng-click='destroy{{ field.fullPathCc | replace("^"+schema, "", "g") }}ByIndex($index);') 
              | 
              button.btn.btn-primary.btn-xs.icon.icon-edit(type='button', ng-click='select{{ field.fullPathCc | replace("^"+schema, "", "g") }}($index);') 
  {%- endmacro %}
mixin form_fields_{{ schema | lower }}()
  {%- for fieldName, field in fields %}{{ render_field(schema, fieldName, field, false) }} {%- endfor %}
  
mixin filter_fields_{{ schema | lower }}()
  {%- for fieldName, field in fields %}{%- if field.isFilter %} {{ render_field(schema, fieldName, field, true) }} {%- endif %}{%- endfor %}  